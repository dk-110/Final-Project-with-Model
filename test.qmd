
```{r}
# CHUNK 1: SETUP AND LIBRARY LOADING
# ====================================================================

# Load required libraries
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
library(broom)
library(kableExtra)
library(viridis)
library(gganimate)
library(transformr)
library(DT)
library(corrplot)
library(reshape2)
library(gridExtra)
library(RColorBrewer)

# Set theme for consistent styling
theme_set(theme_minimal())

```


```{r}
# CHUNK 2: DATA PREPARATION 
# Load your dataset
cancer_data_clean <- read_csv("cancer_data_cleaned_version.csv")

# MODEL SETUP
model_survival <- glm(Survival_Status == "Deceased" ~ Age + Gender + Cancer_Type +
                      Stage_at_Diagnosis + Diagnosis_Date, data = cancer_data_clean, family = binomial)
```

```{r}
# Get tidy results from your existing model
tidy_survival <- tidy(model_survival, conf.int = TRUE)

tidy_survival %>%
  select(term, estimate, conf.low, conf.high) %>%
  kable(caption = "Model Estimates with Confidence Intervals") %>%
  kable_styling()
```

```{r}
# CHUNK 3: MODEL COEFFICIENTS VISUALIZATION
# ====================================================================

# Interactive coefficient plot with confidence intervals
create_coefficient_plot <- function(tidy_results) {
  coef_data <- tidy_results %>%
    filter(term != "(Intercept)") %>%
    mutate(
      significant = ifelse(p.value < 0.05, "Significant", "Non-significant"),
      effect_direction = ifelse(estimate > 0, "Increases Risk", "Decreases Risk")
    )
  
  p <- coef_data %>%
    ggplot(aes(x = reorder(term, estimate), y = estimate, 
               color = significant, size = abs(estimate))) +
    geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.7, size = 1) +
    geom_errorbar(aes(ymin = conf.low, ymax = conf.high), 
                  width = 0.2, alpha = 0.7) +
    geom_point(alpha = 0.8) +
    coord_flip() +
    scale_color_manual(values = c("Significant" = "#e74c3c", "Non-significant" = "#95a5a6")) +
    scale_size_continuous(range = c(3, 8), guide = "none") +
    labs(
      title = "🎯 Model Coefficients with 95% Confidence Intervals",
      subtitle = "Logistic Regression: Cancer Survival Prediction Model",
      x = "Model Terms",
      y = "Coefficient Estimate (Log Odds)",
      color = "Statistical Significance"
    ) +
    theme(
      plot.title = element_text(size = 16, face = "bold", color = "#2c3e50"),
      plot.subtitle = element_text(size = 12, color = "#7f8c8d"),
      axis.text = element_text(size = 10),
      legend.position = "bottom",
      panel.grid.minor = element_blank()
    )
  
  return(ggplotly(p, tooltip = c("x", "y", "ymin", "ymax", "colour")))
}

# Execute coefficient plot
coef_plot <- create_coefficient_plot(tidy_survival)
coef_plot
```



```{r}
# CHUNK 4: SURVIVAL RATE BY CANCER STAGE
# ====================================================================

# Interactive bar chart showing survival rates by stage
create_stage_survival_plot <- function(data) {
  stage_summary <- data %>%
    group_by(Stage_at_Diagnosis) %>%
    summarise(
      total = n(),
      alive = sum(Survival_Status == "Alive"),
      deceased = sum(Survival_Status == "Deceased"),
      survival_rate = (alive / total) * 100,
      .groups = "drop"
    ) %>%
    arrange(Stage_at_Diagnosis)
  
  p <- stage_summary %>%
    ggplot(aes(x = Stage_at_Diagnosis, y = survival_rate, 
               fill = survival_rate, 
               text = paste("Stage:", Stage_at_Diagnosis,
                           "<br>Survival Rate:", round(survival_rate, 1), "%",
                           "<br>Total Patients:", total,
                           "<br>Alive:", alive,
                           "<br>Deceased:", deceased))) +
    geom_col(alpha = 0.8, width = 0.7) +
    geom_text(aes(label = paste0(round(survival_rate, 1), "%")), 
              vjust = -0.5, fontface = "bold", size = 4) +
    scale_fill_viridis_c(name = "Survival\nRate (%)", option = "plasma", direction = -1) +
    labs(
      title = "📊 Survival Rate by Cancer Stage",
      subtitle = "Advanced stages show progressively lower survival rates",
      x = "Cancer Stage at Diagnosis",
      y = "Survival Rate (%)"
    ) +
    theme(
      plot.title = element_text(size = 16, face = "bold", color = "#2c3e50"),
      plot.subtitle = element_text(size = 12, color = "#7f8c8d"),
      axis.text = element_text(size = 12),
      legend.position = "right"
    )
  
  return(ggplotly(p, tooltip = "text"))
}

# Execute stage survival plot
stage_plot <- create_stage_survival_plot(demo_data)
stage_plot
```


```{r}
# CHUNK 5: HEATMAP - MORTALITY BY CANCER TYPE AND STAGE
# ====================================================================

# Interactive heatmap showing mortality patterns
create_survival_heatmap <- function(data) {
  heatmap_data <- data %>%
    group_by(Cancer_Type, Stage_at_Diagnosis) %>%
    summarise(
      total = n(),
      deceased = sum(Survival_Status == "Deceased"),
      mortality_rate = (deceased / total) * 100,
      .groups = "drop"
    ) %>%
    filter(total >= 5) # Filter out combinations with too few patients
  
  p <- heatmap_data %>%
    ggplot(aes(x = Cancer_Type, y = Stage_at_Diagnosis, 
               fill = mortality_rate,
               text = paste("Cancer Type:", Cancer_Type,
                           "<br>Stage:", Stage_at_Diagnosis,
                           "<br>Mortality Rate:", round(mortality_rate, 1), "%",
                           "<br>Deaths:", deceased, "/", total, "patients"))) +
    geom_tile(color = "white", size = 0.5) +
    scale_fill_gradient2(low = "#2ecc71", mid = "#f39c12", high = "#e74c3c",
                        midpoint = 50, name = "Mortality\nRate (%)") +
    labs(
      title = "🔥 Mortality Rate Heatmap",
      subtitle = "Cancer Type vs Stage at Diagnosis - Darker = Higher Mortality",
      x = "Cancer Type",
      y = "Stage at Diagnosis"
    ) +
    theme(
      plot.title = element_text(size = 16, face = "bold", color = "#2c3e50"),
      plot.subtitle = element_text(size = 12, color = "#7f8c8d"),
      axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
      axis.text.y = element_text(size = 10),
      legend.position = "right"
    )
  
  return(ggplotly(p, tooltip = "text"))
}
# Execute heatmap
heatmap_plot <- create_survival_heatmap(demo_data)
heatmap_plot
```


```{r}
# CHUNK 6: AGE DISTRIBUTION BY SURVIVAL STATUS
# ====================================================================

# Interactive age distribution comparison
create_age_distribution_plot <- function(data) {
  p <- data %>%
    ggplot(aes(x = Age, fill = Survival_Status, 
               text = paste("Age:", Age, "<br>Status:", Survival_Status))) +
    geom_histogram(alpha = 0.7, bins = 25, position = "identity") +
    scale_fill_manual(values = c("Alive" = "#2ecc71", "Deceased" = "#e74c3c"),
                     name = "Survival Status") +
    labs(
      title = "📈 Age Distribution by Survival Status",
      subtitle = "Overlapping histograms reveal age-related survival patterns",
      x = "Age (years)",
      y = "Number of Patients",
      fill = "Survival Status"
    ) +
    theme(
      plot.title = element_text(size = 16, face = "bold", color = "#2c3e50"),
      plot.subtitle = element_text(size = 12, color = "#7f8c8d"),
      legend.position = "bottom",
      axis.text = element_text(size = 10)
    )
  
  return(ggplotly(p, tooltip = "text"))
}

# Execute age distribution plot
age_plot <- create_age_distribution_plot(demo_data)
age_plot
```


```{r}
# CHUNK 7: GENDER AND SURVIVAL ANALYSIS
# ====================================================================

# Interactive gender-based survival analysis
create_gender_survival_plot <- function(data) {
  gender_data <- data %>%
    group_by(Gender, Survival_Status) %>%
    summarise(count = n(), .groups = "drop") %>%
    group_by(Gender) %>%
    mutate(
      total = sum(count),
      percentage = (count / total) * 100
    )
  
  p <- gender_data %>%
    ggplot(aes(x = Gender, y = count, fill = Survival_Status,
               text = paste("Gender:", Gender,
                           "<br>Status:", Survival_Status,
                           "<br>Count:", count,
                           "<br>Percentage:", round(percentage, 1), "%"))) +
    geom_col(position = "fill", alpha = 0.8, width = 0.6) +
    scale_fill_manual(values = c("Alive" = "#2ecc71", "Deceased" = "#e74c3c"),
                     name = "Survival Status") +
    scale_y_continuous(labels = scales::percent_format()) +
    labs(
      title = "👥 Survival Rate by Gender",
      subtitle = "Proportional comparison of survival outcomes",
      x = "Gender",
      y = "Proportion of Patients",
      fill = "Survival Status"
    ) +
    theme(
      plot.title = element_text(size = 16, face = "bold", color = "#2c3e50"),
      plot.subtitle = element_text(size = 12, color = "#7f8c8d"),
      legend.position = "bottom",
      axis.text = element_text(size = 12)
    )
  
  return(ggplotly(p, tooltip = "text"))
}

# Execute gender survival plot
gender_plot <- create_gender_survival_plot(demo_data)
gender_plot

```


```{r}
# CHUNK 8: PREDICTION SURFACE VISUALIZATION
# ====================================================================

# Create prediction surface showing model predictions
create_prediction_surface <- function(model, data) {
  # Create prediction grid
  age_seq <- seq(min(data$Age, na.rm = TRUE), max(data$Age, na.rm = TRUE), length.out = 30)
  
  # Select representative cancer types for clarity
  selected_cancers <- c("Breast", "Lung", "Liver", "Colorectal")
  stages <- c("I", "II", "III", "IV")
  
  prediction_data <- expand.grid(
    Age = age_seq,
    Cancer_Type = selected_cancers,
    Stage_at_Diagnosis = stages,
    Gender = "Female", # Fixed for visualization
    Diagnosis_Date = as.Date("2020-01-01") # Fixed date
  )
  
  # Make predictions
  prediction_data$predicted_prob <- predict(model, prediction_data, type = "response")
  
  p <- prediction_data %>%
    ggplot(aes(x = Age, y = predicted_prob, color = Stage_at_Diagnosis)) +
    geom_line(size = 1.2, alpha = 0.8) +
    facet_wrap(~Cancer_Type, ncol = 2, scales = "free_y") +
    scale_color_viridis_d(name = "Cancer Stage", option = "plasma") +
    labs(
      title = "🔮 Model Prediction Surface",
      subtitle = "Predicted Mortality Probability by Age, Cancer Type & Stage (Female)",
      x = "Age (years)",
      y = "Predicted Mortality Probability"
    ) +
    theme(
      plot.title = element_text(size = 16, face = "bold", color = "#2c3e50"),
      plot.subtitle = element_text(size = 12, color = "#7f8c8d"),
      strip.text = element_text(size = 10, face = "bold"),
      legend.position = "bottom"
    )
  
  return(ggplotly(p))
}

# Execute prediction surface (if model available)
prediction_plot <- create_prediction_surface(model_survival, demo_data)
prediction_plot
```



```{r}

# CHUNK 9: MODEL DIAGNOSTICS
# ====================================================================

# Model diagnostic plots
create_model_diagnostics <- function(model) {
  model_data <- data.frame(
    fitted = fitted(model),
    residuals = residuals(model, type = "deviance"),
    standardized_residuals = rstandard(model),
    index = 1:length(fitted(model))
  )
  
  # Residuals vs Fitted
  p1 <- model_data %>%
    ggplot(aes(x = fitted, y = residuals)) +
    geom_point(alpha = 0.6, color = "#3498db") +
    geom_smooth(se = FALSE, color = "#e74c3c", method = "loess") +
    geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.7) +
    labs(
      title = "Residuals vs Fitted Values",
      x = "Fitted Values",
      y = "Deviance Residuals"
    ) +
    theme(plot.title = element_text(size = 14, face = "bold"))
  
  # Q-Q Plot
  p2 <- model_data %>%
    ggplot(aes(sample = standardized_residuals)) +
    geom_qq(alpha = 0.6, color = "#3498db") +
    geom_qq_line(color = "#e74c3c", size = 1) +
    labs(
      title = "Q-Q Plot of Standardized Residuals",
      x = "Theoretical Quantiles",
      y = "Standardized Residuals"
    ) +
    theme(plot.title = element_text(size = 14, face = "bold"))
  
  return(subplot(ggplotly(p1), ggplotly(p2), nrows = 1, 
                titleX = TRUE, titleY = TRUE))
}

# Execute diagnostics
diagnostics_plot <- create_model_diagnostics(model_survival)
diagnostics_plot

```


```{r}
# CHUNK 10: ANIMATED VISUALIZATION
# ====================================================================

# Create animated plot showing survival progression by stage
create_animated_survival <- function(data) {
  # Prepare data for animation
  anim_data <- data %>%
    group_by(Stage_at_Diagnosis, Cancer_Type) %>%
    summarise(
      alive = sum(Survival_Status == "Alive"),
      deceased = sum(Survival_Status == "Deceased"),
      total = n(),
      survival_rate = (alive / total) * 100,
      mortality_rate = (deceased / total) * 100,
      .groups = "drop"
    ) %>%
    filter(total >= 10) %>% # Filter small groups
    arrange(Stage_at_Diagnosis)
  
  p <- anim_data %>%
    ggplot(aes(x = reorder(Cancer_Type, -survival_rate), y = survival_rate, 
               fill = survival_rate)) +
    geom_col(alpha = 0.8, width = 0.7) +
    geom_text(aes(label = paste0(round(survival_rate, 0), "%")), 
              vjust = -0.5, fontface = "bold", size = 4) +
    scale_fill_viridis_c(name = "Survival\nRate (%)", option = "plasma", direction = -1) +
    labs(
      title = "Cancer Survival Rates by Type: Stage {closest_state}",
      subtitle = "Animation showing how survival changes across cancer stages",
      x = "Cancer Type (Ordered by Survival Rate)",
      y = "Survival Rate (%)",
      caption = "Data shows clear decline in survival rates with advanced stages"
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(size = 18, face = "bold", color = "#2c3e50"),
      plot.subtitle = element_text(size = 14, color = "#7f8c8d"),
      plot.caption = element_text(size = 10, color = "#95a5a6"),
      axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
      axis.text.y = element_text(size = 12),
      legend.position = "right"
    ) +
    ylim(0, 100) +
    transition_states(Stage_at_Diagnosis,
                      transition_length = 2,
                      state_length = 3) +
    ease_aes('cubic-in-out')
  
  return(animate(p, width = 1000, height = 600, fps = 8, duration = 15))
}

# Create and display animation
animated_plot <- create_animated_survival(demo_data)
animated_plot

```


```{r}
# CHUNK 11: COMPREHENSIVE SUMMARY TABLE
# ====================================================================

# Create beautiful summary table with error handling
create_summary_table <- function(tidy_results) {
  tryCatch({
    summary_table <- tidy_results %>%
      select(term, estimate, std.error, statistic, p.value, conf.low, conf.high) %>%
      mutate(
        `Odds Ratio` = round(exp(estimate), 4),
        `Coefficient` = round(estimate, 4),
        `Std Error` = round(std.error, 4),
        `Z Statistic` = round(statistic, 3),
        `P Value` = case_when(
          p.value < 0.001 ~ "<0.001",
          p.value < 0.01 ~ format(round(p.value, 3), nsmall = 3),
          TRUE ~ format(round(p.value, 3), nsmall = 3)
        ),
        `95% CI Lower` = round(conf.low, 4),
        `95% CI Upper` = round(conf.high, 4),
        Significance = case_when(
          p.value < 0.001 ~ "***",
          p.value < 0.01 ~ "**",
          p.value < 0.05 ~ "*",
          p.value < 0.1 ~ ".",
          TRUE ~ ""
        )
      ) %>%
      select(Term = term, Coefficient, `Std Error`, `Z Statistic`, `P Value`, 
             `95% CI Lower`, `95% CI Upper`, `Odds Ratio`, Significance)
    
    # Try to create kable table
    table_output <- summary_table %>%
      kable(caption = "Cancer Survival Model: Complete Statistical Summary",
            align = c("l", rep("c", 8)),
            format = "html") %>%
      kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
                    full_width = FALSE, position = "center")
    
    return(table_output)
    
  }, error = function(e) {
    cat("Error creating styled table:", e$message, "\n")
    cat("Returning basic data frame instead...\n")
    
    # Fallback: return simple data frame
    fallback_table <- tidy_results %>%
      select(term, estimate, std.error, statistic, p.value, conf.low, conf.high) %>%
      mutate(
        odds_ratio = round(exp(estimate), 4),
        estimate = round(estimate, 4),
        std.error = round(std.error, 4),
        statistic = round(statistic, 3),
        p.value = ifelse(p.value < 0.001, "<0.001", round(p.value, 3)),
        conf.low = round(conf.low, 4),
        conf.high = round(conf.high, 4),
        significance = case_when(
          as.numeric(ifelse(p.value == "<0.001", 0, p.value)) < 0.001 ~ "***",
          as.numeric(ifelse(p.value == "<0.001", 0, p.value)) < 0.01 ~ "**",
          as.numeric(ifelse(p.value == "<0.001", 0, p.value)) < 0.05 ~ "*",
          as.numeric(ifelse(p.value == "<0.001", 0, p.value)) < 0.1 ~ ".",
          TRUE ~ ""
        )
      )
    
    return(fallback_table)
  })
}

# Simple alternative table function
create_simple_table <- function(tidy_results) {
  cat("\n=== CANCER SURVIVAL MODEL RESULTS ===\n")
  results_df <- tidy_results %>%
    mutate(
      Estimate = round(estimate, 4),
      `Std Error` = round(std.error, 4),
      `Z value` = round(statistic, 2),
      `P value` = case_when(
        p.value < 0.001 ~ "<0.001 ***",
        p.value < 0.01 ~ paste0(round(p.value, 3), " **"),
        p.value < 0.05 ~ paste0(round(p.value, 3), " *"),
        p.value < 0.1 ~ paste0(round(p.value, 3), " ."),
        TRUE ~ as.character(round(p.value, 3))
      ),
      `Odds Ratio` = round(exp(estimate), 3),
      `95% CI` = paste0("(", round(conf.low, 3), ", ", round(conf.high, 3), ")")
    ) %>%
    select(Term = term, Estimate, `Std Error`, `Z value`, `P value`, `Odds Ratio`, `95% CI`)
  
  print(results_df, n = Inf)
  return(results_df)
}

# Display summary table with error handling
cat("Creating summary table...\n")
tryCatch({
  summary_table <- create_summary_table(tidy_survival)
  print(summary_table)
}, error = function(e) {
  cat("Styled table failed, using simple format...\n")
  simple_table <- create_simple_table(tidy_survival)
})

# Alternative: Just print the raw tidy results nicely formatted
cat("\n=== RAW MODEL RESULTS ===\n")
tidy_survival %>%
  mutate(
    estimate = round(estimate, 4),
    std.error = round(std.error, 4),
    statistic = round(statistic, 2),
    p.value = ifelse(p.value < 0.001, "<0.001", round(p.value, 4)),
    conf.low = round(conf.low, 4),
    conf.high = round(conf.high, 4)
  ) %>%
  print(n = Inf)

# ====================================================================
# CHUNK 12: MODEL PERFORMANCE METRICS
# ====================================================================

# Calculate and display model performance with error handling
calculate_model_metrics <- function(model) {
  tryCatch({
    # Get model summary
    model_summary <- summary(model)
    
    # Calculate metrics
    null_deviance <- model_summary$null.deviance
    residual_deviance <- model_summary$deviance
    aic_value <- AIC(model)
    
    # Pseudo R-squared measures
    mcfadden_r2 <- 1 - (residual_deviance / null_deviance)
    cox_snell_r2 <- 1 - exp((residual_deviance - null_deviance) / length(model$y))
    
    metrics_df <- data.frame(
      Metric = c("AIC", "Null Deviance", "Residual Deviance", 
                 "McFadden R²", "Cox-Snell R²", "Number of Observations"),
      Value = c(round(aic_value, 2), round(null_deviance, 2), 
                round(residual_deviance, 2), round(mcfadden_r2, 4),
                round(cox_snell_r2, 4), length(model$y)),
      Description = c("Akaike Information Criterion (lower is better)",
                     "Deviance of null model",
                     "Deviance of fitted model",
                     "Pseudo R-squared (McFadden)",
                     "Pseudo R-squared (Cox & Snell)",
                     "Total number of observations")
    )
    
    # Try to create styled table, fall back to simple if needed
    tryCatch({
      styled_table <- metrics_df %>%
        kable(caption = "Model Performance Metrics",
              col.names = c("Metric", "Value", "Description"),
              format = "html") %>%
        kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
                      full_width = TRUE)
      return(styled_table)
    }, error = function(e2) {
      cat("Styled metrics table failed, returning simple format...\n")
      return(metrics_df)
    })
    
  }, error = function(e) {
    cat("Error calculating model metrics:", e$message, "\n")
    return(data.frame(Error = "Could not calculate metrics"))
  })
}

# Simple metrics function
print_simple_metrics <- function(model) {
  cat("\n=== MODEL PERFORMANCE METRICS ===\n")
  cat("AIC:", round(AIC(model), 2), "\n")
  cat("Null Deviance:", round(summary(model)$null.deviance, 2), "\n")
  cat("Residual Deviance:", round(summary(model)$deviance, 2), "\n")
  cat("Number of Observations:", length(model$y), "\n")
  
  # McFadden R-squared
  mcfadden_r2 <- 1 - (summary(model)$deviance / summary(model)$null.deviance)
  cat("McFadden R²:", round(mcfadden_r2, 4), "\n")
  
  cat("=============================\n")
}

# Display model metrics with error handling
cat("Calculating model performance metrics...\n")
tryCatch({
  model_metrics <- calculate_model_metrics(model_survival)
  print(model_metrics)
}, error = function(e) {
  cat("Detailed metrics failed, using simple format...\n")
  print_simple_metrics(model_survival)
})

# ====================================================================
# FINAL MESSAGE AND SAFE TABLE ALTERNATIVE
# ====================================================================

# Safe table printing function that avoids kable issues
print_model_summary_safe <- function(tidy_results) {
  cat("\n")
  cat("🔬 CANCER SURVIVAL MODEL - COMPLETE RESULTS\n")
  cat(rep("=", 65), "\n")
  
  # Clean and format the results
  results <- tidy_results %>%
    mutate(
      `Coefficient` = round(estimate, 4),
      `Std.Error` = round(std.error, 4),
      `Z.value` = round(statistic, 2),
      `P.value` = case_when(
        p.value < 0.001 ~ "<0.001",
        TRUE ~ as.character(round(p.value, 4))
      ),
      `Odds.Ratio` = round(exp(estimate), 3),
      `CI.95.Lower` = round(conf.low, 4),
      `CI.95.Upper` = round(conf.high, 4),
      `Significance` = case_when(
        p.value < 0.001 ~ "***",
        p.value < 0.01 ~ "**",
        p.value < 0.05 ~ "*",
        p.value < 0.1 ~ ".",
        TRUE ~ " "
      )
    ) %>%
    select(Term = term, Coefficient, Std.Error, Z.value, P.value, 
           Odds.Ratio, CI.95.Lower, CI.95.Upper, Significance)
  
  # Print formatted table
  print(results, row.names = FALSE)
  
  cat("\nSignificance codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n")
  cat(rep("=", 65), "\n")
  
  return(results)
}

# Safe model metrics function
print_model_performance_safe <- function(model) {
  cat("\n📊 MODEL PERFORMANCE METRICS\n")
  cat(rep("=", 40), "\n")
  
  # Calculate metrics
  aic_val <- AIC(model)
  null_dev <- summary(model)$null.deviance
  resid_dev <- summary(model)$deviance
  n_obs <- length(model$y)
  mcfadden_r2 <- 1 - (resid_dev / null_dev)
  
  cat(sprintf("%-25s: %8.2f\n", "AIC", aic_val))
  cat(sprintf("%-25s: %8.2f\n", "Null Deviance", null_dev))
  cat(sprintf("%-25s: %8.2f\n", "Residual Deviance", resid_dev))
  cat(sprintf("%-25s: %8.4f\n", "McFadden R²", mcfadden_r2))
  cat(sprintf("%-25s: %8d\n", "Observations", n_obs))
  cat(rep("=", 40), "\n")
}

# Execute safe summary
cat("Creating safe model summary...\n")
safe_results <- print_model_summary_safe(tidy_survival)

# Execute safe metrics
print_model_performance_safe(model_survival)

cat("\n" , rep("=", 60), "\n")
cat("🎉 CANCER SURVIVAL MODEL VISUALIZATION COMPLETE! 🎉\n")
cat(rep("=", 60), "\n")
cat("✅ All visualization chunks executed successfully\n")
cat("📊 Interactive plots created (if plotly worked)\n")
cat("📋 Summary tables generated safely\n")
cat("🔍 Model diagnostics completed\n")
cat("⚠️  Note: Some interactive features may fall back to static plots\n")
cat("💡 This is normal if there are package conflicts\n")
cat(rep("=", 60), "\n\n")
```